2785. Sort Vowels in a String

STATEMENT
Given a 0-indexed string s, permute s to get a new string t such that:
    All consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length 
    such that s[i] is a consonant, then t[i] = s[i].
    The vowels must be sorted in the nondecreasing order of their ASCII values. More formally, 
    for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, 
    then t[i] must not have a higher ASCII value than t[j].
Return the resulting string.
The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. 
Consonants comprise all letters that are not vowels.

SOLUTION

C++
class Solution
{
public:
    int eliminateMaximum(vector<int>& dist, vector<int>& speed)
    {
        int n=dist.size();
        vector<int>v(n);
        for(int i=0;i<dist.size();i++)
        {
            v[i]=((dist[i]+speed[i]-1)/speed[i]);
        }
        
        for(auto it: v)
        {
            cout<<it<<endl;
        }
        sort(v.begin(), v.end());
        
        int cur=0;
        for(int i=0;i<n;i++)
        {
            if(v[i]<=cur)
            {
                return i;
            }
            cur++;
        }
        return n;

    }
};


