2642. Design Graph With Shortest Path Calculator

STATEMENT
There is a directed weighted graph that consists of n nodes numbered from 0 to n - 1. 
The edges of the graph are initially represented by the given array edges where edges[i] = [fromi, toi, 
edgeCosti] meaning that there is an edge from fromi to toi with the cost edgeCosti.
Implement the Graph class:
    Graph(int n, int[][] edges) initializes the object with n nodes and the given edges.
    addEdge(int[] edge) adds an edge to the list of edges where edge = [from, to, edgeCost]. 
    It is guaranteed that there is no edge between the two nodes before adding this one.
    int shortestPath(int node1, int node2) returns the minimum cost of a path from node1 to node2. 
    If no path exists, return -1. The cost of a path is the sum of the costs of the edges in the path.

SOLUTION

C++
class Graph
{
public:
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>pq;
    unordered_map<int, vector<pair<int, int>>>adj;
    int N;
    Graph(int n, vector<vector<int>>& edges)
    {
        N=n;

        for(auto it:edges)
        {
            int u=it[0], v=it[1], c=it[2];
            adj[u].push_back({v, c});
        }
    }

    void addEdge(vector<int> edge)
    {
        int u=edge[0], v=edge[1], c=edge[2];
        adj[u].push_back({v, c});

    }

    int shortestPath(int node1, int node2)
    {

        vector<int>res(N, INT_MAX);
        res[node1]=0;
        pq.push({0, node1});

        while(!pq.empty())
        {
            auto it=pq.top();
            int d=it.first;
            int node=it.second;
            pq.pop();

            for(auto iit:adj[node])
            {
                int adjNode=iit.first;
                int dist=iit.second;

                if(d+dist < res[adjNode])
                {
                    res[adjNode]=d+dist;
                    pq.push({d+dist, adjNode});
                }
            }
        }

        return res[node2] == INT_MAX ? -1 : res[node2];

    }
};
