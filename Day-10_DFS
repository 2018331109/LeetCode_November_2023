1743. Restore the Array From Adjacent Pairs

STATEMENT
There is an integer array nums that consists of n unique elements, but you have forgotten it. 
However, you do remember every pair of adjacent elements in nums.
You are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that 
the elements ui and vi are adjacent in nums.
It is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, 
either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order.
Return the original array nums. If there are multiple solutions, return any of them.

SOLUTION

C++
class Solution
{
public:
    void dfs(unordered_map<int, vector<int>>&m, unordered_set<int>&s, int vl, vector<int>&ans)
    {
        if(s.find(vl)!=s.end())
        {
            return;
        }
        
        s.insert(vl);
        ans.push_back(vl);
        for(auto it:m[vl])
        {
            dfs(m, s, it, ans);
        }
    }
    
    vector<int> restoreArray(vector<vector<int>>& Pairs)
    {
        int n=Pairs.size();
        unordered_map<int, vector<int>>m;
        unordered_set<int>s;
        vector<int>ans;
        int head;
        for(auto it:Pairs)
        {
            m[it[0]].push_back(it[1]);
            m[it[1]].push_back(it[0]);
            
        }
        
        for(auto it:m)
        {
            if(it.second.size()==1)
            {
                head=it.first;
            }
        }
        
        dfs(m, s, head, ans);
        return ans;
    }
};


