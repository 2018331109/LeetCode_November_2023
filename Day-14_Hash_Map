1930. Unique Length-3 Palindromic Subsequences

STATEMENT
Given a string s, return the number of unique palindromes of length three that are a subsequence of s.
Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once.
A palindrome is a string that reads the same forwards and backwards.
A subsequence of a string is a new string generated from the original string with some characters (can be none) 
deleted without changing the relative order of the remaining characters.

SOLUTION

C++
class Solution
{
public:
    int countPalindromicSubsequence(string s)
    {
        int n=s.size();
        unordered_map<int, pair<int, int>>mp;
        for(char c='a'; c<='z'; c++)
        {
            mp[c]= {-1, -1};
        }

        for(int i=0; i<n; i++)
        {
            char c=s[i];
            if(mp[c].first==-1)
            {
                mp[c].first=i;
            }
            mp[c].second=i;
        }

        int ans=0;
        for(auto it:mp)
        {
            char c=it.first;
            int i=it.second.first, j=it.second.second;

            unordered_set<char>st;
            i++;
            while(i<j)
            {
                st.insert(s[i]);
                i++;
            }

            ans+=st.size();
        }

        return ans;

    }
};

//This is not by me!!!
class Solution {
public:
    int countPalindromicSubsequence(string s) {
        char c[26] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
        int a = 0, t = 0;

        int l, r;
        for (char x : c) {
            for (l = 0; l < s.length() && s[l] != x; l++);
            if (l == s.length()) continue;
            for (r = s.length() - 1; r >= 0 && s[r] != x; r--);
            if (l >= r) continue;

            vector<bool> v(128, false);
            t = 0;
            for (int i = l + 1; i < r; i++) {
                if (!v[s[i]]) {
                    v[s[i]] = true;
                    t++;
                    if (t == 26) break;
                }
            }
            a += t;
        }
        return a;
    }
};
